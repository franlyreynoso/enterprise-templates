version: "3.8"

# Enterprise UI Template - Environment-specific Docker Compose
# Uses profiles to match backend template architecture
# Usage: COMPOSE_PROFILES=dev|staging|prod|integrated

services:
  # PostgreSQL Database (matches backend exactly)
  postgres:
    image: postgres:16-alpine
    container_name: enterprise-ui-postgres
    profiles: ["dev", "staging", "prod", "integrated"]
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - enterprise-network

  # pgAdmin (development only - matches backend)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: enterprise-ui-pgadmin
    profiles: ["dev"]
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - postgres
    networks:
      - enterprise-network

  # Seq Centralized Logging (matches backend exactly)
  seq:
    image: datalust/seq:latest
    container_name: enterprise-ui-seq
    profiles: ["dev", "staging", "prod", "integrated"]
    environment:
      ACCEPT_EULA: Y
      SEQ_FIRSTRUN_ADMINPASSWORDHASH: ${SEQ_PASSWORD_HASH}
    ports:
      - "${SEQ_PORT}:80"
      - "${SEQ_INGESTION_PORT}:5341"
    volumes:
      - seq_data:/data
    networks:
      - enterprise-network

  # OpenTelemetry Collector (matches backend service name 'otel')
  otel:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: enterprise-ui-otel
    profiles: ["dev", "staging", "prod", "integrated"]
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "${OTEL_GRPC_PORT}:4317" # OTLP gRPC receiver
      - "${OTEL_HTTP_PORT}:4318" # OTLP HTTP receiver
      - "${OTEL_HEALTH_PORT}:13133" # Health check
    depends_on:
      - jaeger
    networks:
      - enterprise-network

  # Jaeger Tracing UI
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: enterprise-ui-jaeger
    profiles: ["dev", "staging", "prod", "integrated"]
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    ports:
      - "${JAEGER_UI_PORT}:16686" # Jaeger UI
      - "${JAEGER_GRPC_PORT}:14250" # Jaeger gRPC
      - "${JAEGER_THRIFT_PORT}:14268" # Jaeger thrift
      - "${JAEGER_ZIPKIN_PORT}:9411" # Zipkin compatibility
    networks:
      - enterprise-network

  # Blazor UI Application
  enterprise-ui:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: enterprise-ui-app
    profiles: ["dev", "staging", "prod", "integrated"]
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: "http://+:80"
      # Database connection (matches backend variable names)
      ConnectionStrings__DefaultConnection: "Host=postgres;Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASS}"
      # Observability endpoints
      Seq__ServerUrl: "http://seq:5341"
      OpenTelemetry__Endpoint: "http://otel:4317"
    ports:
      - "${UI_HTTP_PORT}:80"
    depends_on:
      postgres:
        condition: service_healthy
      seq:
        condition: service_started
      otel:
        condition: service_started
    networks:
      - enterprise-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: RabbitMQ Message Broker (matches backend template)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: enterprise-ui-rabbitmq
    profiles: ["integrated"] # Only for full-stack integration
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MGMT_PORT}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - enterprise-network

  # Optional: Redis Cache (matches backend template)
  redis:
    image: redis:7-alpine
    container_name: enterprise-ui-redis
    profiles: ["integrated"] # Only for full-stack integration
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - enterprise-network

  # Optional: MailHog Email Testing (matches backend template)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: enterprise-ui-mailhog
    profiles: ["dev", "integrated"] # Development and integration only
    ports:
      - "${MAILHOG_SMTP_PORT}:1025" # SMTP
      - "${MAILHOG_HTTP_PORT}:8025" # Web UI
    networks:
      - enterprise-network

volumes:
  postgres_data:
    name: enterprise-ui-postgres-data
  seq_data:
    name: enterprise-ui-seq-data
  rabbitmq_data:
    name: enterprise-ui-rabbitmq-data
  redis_data:
    name: enterprise-ui-redis-data

networks:
  enterprise-network:
    name: enterprise-ui-network
    driver: bridge
